allprojects {
    apply plugin: "java"
    apply plugin: "jacoco"

    repositories {
        mavenCentral()
    }

    tasks.register("printClasspath") {
        println "cifuzz.test.classpath=${sourceSets.test.runtimeClasspath.asPath}";
    }

    tasks.register("printBuildDir") {
        println "cifuzz.test.buildDir=${layout.buildDirectory.get()}";
    }

    // we register own tasks for the report to avoid side effects on existing user tasks
    // when overwriting config values (like output path)

    // we need to set the exec file output path explicitly to make sure we find
    // the file in the `cifuzzReport` tasks
    def execFile = layout.buildDirectory.file("jacaco/cifuzz.exec").get().asFile
    def fuzzTest = project.findProperty("cifuzz.fuzztest")

    tasks.register("cifuzzTest", Test) {
        useJUnitPlatform()
        ignoreFailures = true
        // disable jazzer hooks because they are not needed for coverage runs
        jvmArgs '-Djazzer.hooks=false'

        jacoco {
            destinationFile = execFile
        }
        filter {
            includeTestsMatching fuzzTest
        }
    }

    tasks.register("cifuzzReport", org.gradle.testing.jacoco.tasks.JacocoReport) {
        // When registering an instance of the `JacocoReport` class required variables
        // are not set to the same values when using `jacocoTestReport` directly.
        // So we have to set them by hand and trigger the report generation by calling
        // `generate()`
        executionData execFile
        classDirectories.from files(project.sourceSets.main.output)
        sourceDirectories.from files(project.sourceSets.main.java.srcDirs)

        def output = project.findProperty("cifuzz.report.output") ?: layout.buildDirectory.dir("reports/cifuzz").get().toString()
        def format = project.findProperty("cifuzz.report.format")
        reports {
            html.enabled = format != "jacocoxml"
            html.outputLocation = file("$output/html")
            xml.required = true
            xml.outputLocation = file("$output/jacoco.xml")
        }

        generate()
    }
}
