==9522==ERROR: AddressSanitizer: stack-use-after-scope on address 0x00016f6022a4 at pc 0x000100809484 bp 0x00016f602270 sp 0x00016f602268
  WRITE of size 4 at 0x00016f6022a4 thread T0
      #0 0x100809480 in use_after_scope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) /testdata/use-after-scope/use_after_scope.cpp:12:13
      #1 0x1007feae0 in LLVMFuzzerTestOneInputNoReturn(unsigned char const*, unsigned long) /testdata/use-after-scope/use_after_scope_fuzztest.cpp:12:5
      #2 0x1007fe8f8 in LLVMFuzzerTestOneInput /testdata/use-after-scope/use_after_scope_fuzztest.cpp:9:1
      #3 0x100820f1c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13
      #4 0x100820810 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7
      #5 0x100821e5c in fuzzer::Fuzzer::MutateAndTestOne() /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:758:19
      #6 0x100822b48 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:903:5
      #7 0x100812214 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
      #8 0x10083da40 in main /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
      #9 0x1811e3e4c  (<unknown module>)
      #10 0x4c147ffffffffffc  (<unknown module>)

  Address 0x00016f6022a4 is located in stack of thread T0 at offset 36 in frame
      #0 0x100808fb8 in use_after_scope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) /testdata/use-after-scope/use_after_scope.cpp:6

    This frame has 1 object(s):
      [32, 52) 'x' (line 9) <== Memory access at offset 36 is inside this variable
  HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
        (longjmp and C++ exceptions *are* supported)
  SUMMARY: AddressSanitizer: stack-use-after-scope /testdata/use-after-scope/use_after_scope.cpp:12:13 in use_after_scope(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)
  Shadow bytes around the buggy address:
    0x00702dee0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x00702dee0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x00702dee0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x00702dee0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x00702dee0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  =>0x00702dee0450: f1 f1 f1 f1[f8]f8 f8 f3 f3 f3 f3 f3 00 00 00 00
    0x00702dee0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x00702dee0470: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
    0x00702dee0480: 00 00 f2 f2 00 00 00 f2 f2 f2 f2 f2 00 00 00 f3
    0x00702dee0490: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
    0x00702dee04a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  Shadow byte legend (one shadow byte represents 8 application bytes):
    Addressable:           00
    Partially addressable: 01 02 03 04 05 06 07
    Heap left redzone:       fa
    Freed heap region:       fd
    Stack left redzone:      f1
    Stack mid redzone:       f2
    Stack right redzone:     f3
    Stack after return:      f5
    Stack use after scope:   f8
    Global redzone:          f9
    Global init order:       f6
    Poisoned by user:        f7
    Container overflow:      fc
    Array cookie:            ac
    Intra object redzone:    bb
    ASan internal:           fe
    Left alloca redzone:     ca
    Right alloca redzone:    cb
