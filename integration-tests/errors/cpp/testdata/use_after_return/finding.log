==9361==ERROR: AddressSanitizer: stack-use-after-return on address 0x000106495020 at pc 0x00010444549c bp 0x00016b9c6400 sp 0x00016b9c63f8
  WRITE of size 4 at 0x000106495020 thread T0
      #0 0x104445498 in use_after_return(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) /testdata/use-after-return/use_after_return.cpp:13:14
      #1 0x10443ab50 in LLVMFuzzerTestOneInputNoReturn(unsigned char const*, unsigned long) /testdata/use-after-return/use_after_return_fuzztest.cpp:12:5
      #2 0x10443a968 in LLVMFuzzerTestOneInput /testdata/use-after-return/use_after_return_fuzztest.cpp:9:1
      #3 0x10445ce98 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13
      #4 0x10445c78c in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7
      #5 0x10445e5f8 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:827:7
      #6 0x10445e838 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:865:3
      #7 0x10444e190 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
      #8 0x1044799bc in main /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
      #9 0x1811e3e4c  (<unknown module>)
      #10 0x6652fffffffffffc  (<unknown module>)

  Address 0x000106495020 is located in stack of thread T0 at offset 32 in frame
      #0 0x104445028 in foo() /testdata/use-after-return/use_after_return.cpp:5

    This frame has 1 object(s):
      [32, 432) 'local' (line 6) <== Memory access at offset 32 is inside this variable
  HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
        (longjmp and C++ exceptions *are* supported)
  SUMMARY: AddressSanitizer: stack-use-after-return /testdata/use-after-return/use_after_return.cpp:13:14 in use_after_return(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)
  Shadow bytes around the buggy address:
    0x007020cb29b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x007020cb29c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x007020cb29d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x007020cb29e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x007020cb29f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  =>0x007020cb2a00: f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
    0x007020cb2a10: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
    0x007020cb2a20: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
    0x007020cb2a30: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
    0x007020cb2a40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    0x007020cb2a50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  Shadow byte legend (one shadow byte represents 8 application bytes):
    Addressable:           00
    Partially addressable: 01 02 03 04 05 06 07
    Heap left redzone:       fa
    Freed heap region:       fd
    Stack left redzone:      f1
    Stack mid redzone:       f2
    Stack right redzone:     f3
    Stack after return:      f5
    Stack use after scope:   f8
    Global redzone:          f9
    Global init order:       f6
    Poisoned by user:        f7
    Container overflow:      fc
    Array cookie:            ac
    Intra object redzone:    bb
    ASan internal:           fe
    Left alloca redzone:     ca
    Right alloca redzone:    cb
