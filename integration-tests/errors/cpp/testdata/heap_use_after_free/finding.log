==3885==ERROR: AddressSanitizer: heap-use-after-free on address 0x000106f0c4d0 at pc 0x0001049924bc bp 0x00016bb2a350 sp 0x00016bb29ae0
 READ of size 3 at 0x000106f0c4d0 thread T0
     #0 0x1049924b8 in printf_common(void*, char const*, char*) (/opt/homebrew/Cellar/llvm/15.0.7_1/lib/clang/15.0.7/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:arm64+0x1e4b8) (BuildId: ee0fd54f5b5b37fab0dff0277a63fa1d32000000200000000100000000000b00)
     #1 0x104992d4c in wrap_printf (/opt/homebrew/Cellar/llvm/15.0.7_1/lib/clang/15.0.7/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:arm64+0x1ed4c) (BuildId: ee0fd54f5b5b37fab0dff0277a63fa1d32000000200000000100000000000b00)
     #2 0x1042e1550 in use_after_free(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) /testdata/heap-use-after-free/heap_use_after_free.cpp:7:9
     #3 0x1042d6f84 in LLVMFuzzerTestOneInputNoReturn(unsigned char const*, unsigned long) /testdata/heap-use-after-free/heap_use_after_free_fuzztest.cpp:12:5
     #4 0x1042d6d9c in LLVMFuzzerTestOneInput /testdata/heap-use-after-free/heap_use_after_free_fuzztest.cpp:9:1
     #5 0x1042f8f3c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13
     #6 0x1042f8830 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7
     #7 0x1042f9e7c in fuzzer::Fuzzer::MutateAndTestOne() /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:758:19
     #8 0x1042fab68 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:903:5
     #9 0x1042ea234 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
     #10 0x104315a60 in main /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
     #11 0x1811e3e4c  (<unknown module>)
     #12 0x7e207ffffffffffc  (<unknown module>)

 0x000106f0c4d1 is located 0 bytes to the right of 1-byte region [0x000106f0c4d0,0x000106f0c4d1)
 freed by thread T0 here:
     #0 0x1049b32b0 in wrap_free (/opt/homebrew/Cellar/llvm/15.0.7_1/lib/clang/15.0.7/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:arm64+0x3f2b0) (BuildId: ee0fd54f5b5b37fab0dff0277a63fa1d32000000200000000100000000000b00)
     #1 0x1042e1538 in use_after_free(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) /testdata/heap-use-after-free/heap_use_after_free.cpp:6:9
     #2 0x1042d6f84 in LLVMFuzzerTestOneInputNoReturn(unsigned char const*, unsigned long) /testdata/heap-use-after-free/heap_use_after_free_fuzztest.cpp:12:5
     #3 0x1042d6d9c in LLVMFuzzerTestOneInput /testdata/heap-use-after-free/heap_use_after_free_fuzztest.cpp:9:1
     #4 0x1042f8f3c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13
     #5 0x1042f8830 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7
     #6 0x1042f9e7c in fuzzer::Fuzzer::MutateAndTestOne() /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:758:19
     #7 0x1042fab68 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:903:5
     #8 0x1042ea234 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
     #9 0x104315a60 in main /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
     #10 0x1811e3e4c  (<unknown module>)
     #11 0x7e207ffffffffffc  (<unknown module>)

 previously allocated by thread T0 here:
     #0 0x1049b317c in wrap_malloc (/opt/homebrew/Cellar/llvm/15.0.7_1/lib/clang/15.0.7/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:arm64+0x3f17c) (BuildId: ee0fd54f5b5b37fab0dff0277a63fa1d32000000200000000100000000000b00)
     #1 0x1042e152c in use_after_free(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) /testdata/heap-use-after-free/heap_use_after_free.cpp:5:28
     #2 0x1042d6f84 in LLVMFuzzerTestOneInputNoReturn(unsigned char const*, unsigned long) /testdata/heap-use-after-free/heap_use_after_free_fuzztest.cpp:12:5
     #3 0x1042d6d9c in LLVMFuzzerTestOneInput /testdata/heap-use-after-free/heap_use_after_free_fuzztest.cpp:9:1
     #4 0x1042f8f3c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13
     #5 0x1042f8830 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7
     #6 0x1042f9e7c in fuzzer::Fuzzer::MutateAndTestOne() /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:758:19
     #7 0x1042fab68 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:903:5
     #8 0x1042ea234 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
     #9 0x104315a60 in main /tmp/llvm-20230115-15744-5hwhtr/llvm-project-15.0.7.src/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
     #10 0x1811e3e4c  (<unknown module>)
     #11 0x7e207ffffffffffc  (<unknown module>)

 SUMMARY: AddressSanitizer: heap-use-after-free (/opt/homebrew/Cellar/llvm/15.0.7_1/lib/clang/15.0.7/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:arm64+0x1e4b8) (BuildId: ee0fd54f5b5b37fab0dff0277a63fa1d32000000200000000100000000000b00) in printf_common(void*, char const*, char*)
 Shadow bytes around the buggy address:
   0x007020e01840: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
   0x007020e01850: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
   0x007020e01860: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
   0x007020e01870: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
   0x007020e01880: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
 =>0x007020e01890: fa fa fa fa fa fa fa fa fa fa[fd]fa fa fa 07 fa
   0x007020e018a0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
   0x007020e018b0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
   0x007020e018c0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
   0x007020e018d0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
   0x007020e018e0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
 Shadow byte legend (one shadow byte represents 8 application bytes):
   Addressable:           00
   Partially addressable: 01 02 03 04 05 06 07
   Heap left redzone:       fa
   Freed heap region:       fd
   Stack left redzone:      f1
   Stack mid redzone:       f2
   Stack right redzone:     f3
   Stack after return:      f5
   Stack use after scope:   f8
   Global redzone:          f9
   Global init order:       f6
   Poisoned by user:        f7
   Container overflow:      fc
   Array cookie:            ac
   Intra object redzone:    bb
   ASan internal:           fe
   Left alloca redzone:     ca
   Right alloca redzone:    cb
