name: 'Compatibility Check'
description: 'Checks if a new version is compatible to existing builds|findings'
inputs:
  os: 
    description: 'current vm operating system'
    required: true
runs:
  using: "composite"
  steps:
    - name: Setup (linux)
      if: contains(inputs.os, 'ubuntu')
      run: |
        echo "INSTALLER=cifuzz_installer_linux_amd64" >> $GITHUB_ENV
      shell: bash

    - name: Setup (macos)
      if: contains(inputs.os, 'macos')
      run: echo "INSTALLER=cifuzz_installer_macOS_amd64" >> $GITHUB_ENV
      shell: bash

    - name: Setup (windows)
      if: contains(inputs.os, 'windows')
      run: echo "INSTALLER=cifuzz_installer_windows_amd64.exe" >> $GITHUB_ENV
      shell: bash

    - name: Download & execute latest installer
      run: |
        mkdir -p ~/current_release
        cd ~/current_release
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/CodeIntelligenceTesting/cifuzz/main/install.sh)"
      shell: bash

    # change paths as soon as the new install path is released
    - name: CMake Example (run + bundle)
      run: |
        cd examples/cmake
        export CIFUZZ_BUNDLE_ON_UNSUPPORTED_PLATFORMS=1
        cifuzz run --use-sandbox=false my_fuzz_test
        cifuzz findings --json | jq -r '.[].name' >> findings.old
        cifuzz bundle my_fuzz_test
      shell: bash

    # by now coverage runs are not supported on windows
    - name: Run CMake Example (coverage)
      if: "!contains(inputs.os, 'windows')"
      run: |
        cd examples/cmake
        cifuzz coverage my_fuzz_test
      shell: bash

    - name: Replace current version with the newly created one (linux & macOS)
      if: contains(inputs.os, 'macos') || contains(inputs.os, 'ubuntu')
      run: |
        rm -r ~/.local/bin/cifuzz
        cd build/bin
        chmod u+x $INSTALLER
        ./$INSTALLER
      shell: bash

    - name: Replace current version with the newly created one (windows)
      if: contains(inputs.os, 'windows')
      run: |
        rm -r ~/AppData/Roaming/cifuzz/bin
        cd build/bin
        chmod u+x $INSTALLER
        ./$INSTALLER
      shell: bash

    - name: Run CMake Example again (run + bundle)
      run: |
        cd examples/cmake
        export CIFUZZ_BUNDLE_ON_UNSUPPORTED_PLATFORMS=1
        cifuzz run my_fuzz_test
        cifuzz findings --json | jq -r '.[].name' >> findings.new
        cifuzz bundle my_fuzz_test
      shell: bash

    # by now coverage runs are not supported on windows
    - name: Run CMake Example again (coverage)
      if: "!contains(inputs.os, 'windows')"
      run: |
        cd examples/cmake
        cifuzz coverage my_fuzz_test
      shell: bash

    - name: Compare findings
      run: |
        cd examples/cmake
        echo "--old--" && cat findings.old
        echo "--new--" && cat findings.new
        test -z $(comm -23 <(sort -u findings.old) <(sort -u findings.new))
      shell: bash
