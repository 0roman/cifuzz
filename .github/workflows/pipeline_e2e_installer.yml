# This Pipeline executes some kind of e2e test by running instructions from the docs
# As it uses the installer created by the release pipeline it only runs after the 
# release pipeline finished
name: E2E Installer Installation/Example Test

on:
  workflow_run:
    workflows: ["Release Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  test-installer:
    name: ${{ matrix.os }} - test installer 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11, ubuntu-22.04, ubuntu-18.04, windows-latest]
    steps:
      - name: Install dependencies (linux) 
        if: contains(matrix.os, 'ubuntu')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          sudo apt update
          sudo apt --yes install cmake clang llvm

      - name: Install dependencies (windows) 
        if: contains(matrix.os, 'windows')
        # please make sure this is in sync with the README.md / installation docs
        run: choco install cmake llvm 

      # Add cl.exe to the PATH on Windows for the replayer integration test.
      # Pinned to the commit of the v1.10.0 tag on 2022-05-05.
      - name: MSVC - Windows
        uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
        if: contains(matrix.os, 'windows')

      - name: Install dependencies (macos) 
        if: contains(matrix.os, 'macos')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          brew install cmake llvm@11
          LLVM_PATH=$(brew --prefix llvm@11)
          LLVM_VERSION=11.1.0
          ls -lah $LLVM_PATH/lib/clang/
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CPATH=$LLVM_PATH/lib/clang/$LLVM_VERSION/include/" >> $GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_PATH/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_PATH/include" >> $GITHUB_ENV
          echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV
          echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV
          echo "PATH=$PATH:$LLVM_PATH/bin" >> $GITHUB_ENV

      - name: Download latest installer (linux)
        if: contains(matrix.os, 'ubuntu')
        run: curl -L -o cifuzz_installer https://github.com/CodeIntelligenceTesting/cifuzz/releases/latest/download/cifuzz_installer_linux

      - name: Download latest installer (macos)
        if: contains(matrix.os, 'macos')
        run: curl -L -o cifuzz_installer https://github.com/CodeIntelligenceTesting/cifuzz/releases/latest/download/cifuzz_installer_darwin

      - name: Download latest installer (windows)
        if: contains(matrix.os, 'windows')
        run: curl -L -o cifuzz_installer https://github.com/CodeIntelligenceTesting/cifuzz/releases/latest/download/cifuzz_installer_windows.exe
        shell: bash

      - name: Execute Installer
        run: |
          chmod u+x cifuzz_installer
          ./cifuzz_installer
        shell: bash

      - name: Test cifuzz 
        run: ~/cifuzz/bin/cifuzz --version | grep -E "^cifuzz version [0-9]+.[0-9]+.[0-9]+$"
        shell: bash

      - name: Download Example Projects
        # workaround to just download a single directory from github
        run: svn export https://github.com/CodeIntelligenceTesting/cifuzz.git/trunk/examples
        shell: bash

      - name: Run CMake Example
        run: |
          cd examples/cmake
          ~/cifuzz/bin/cifuzz run my_fuzz_test 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "Finding 1"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash
