# This Pipeline executes some kind of e2e test by running instructions from the docs
# As it uses the installer created by the release pipeline it only runs after the 
# release pipeline finished
name: E2E Installer Installation/Example Test

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  test-installer:
    name: ${{ matrix.os }} - test installer 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11, ubuntu-22.04, windows-2022]
    steps:
      - name: Install dependencies (linux) 
        if: contains(matrix.os, 'ubuntu')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          sudo apt update
          sudo apt --yes install cmake clang llvm default-jdk maven
          curl --fail --location https://services.gradle.org/distributions/gradle-7.5.1-bin.zip --output /tmp/gradle-7.5.1-bin.zip
          unzip -d /opt/gradle /tmp/gradle-7.5.1-bin.zip
          echo "/opt/gradle/gradle-7.5.1/bin" >> $GITHUB_PATH

      - name: Install dependencies (windows) 
        if: contains(matrix.os, 'windows')
        # please make sure this is in sync with the README.md / installation docs
        run: choco install cmake llvm microsoft-openjdk maven gradle

      # Add cl.exe to the PATH on Windows for the replayer integration test.
      # Pinned to the commit of the v1.10.0 tag on 2022-05-05.
      - name: MSVC - Windows
        uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
        if: contains(matrix.os, 'windows')

      - name: Install dependencies (macos) 
        if: contains(matrix.os, 'macos')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          brew install cmake llvm@11 openjdk maven gradle
          LLVM_PATH=$(brew --prefix llvm@11)
          LLVM_VERSION=11.1.0
          ls -lah $LLVM_PATH/lib/clang/
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CPATH=$LLVM_PATH/lib/clang/$LLVM_VERSION/include/" >> $GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_PATH/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_PATH/include" >> $GITHUB_ENV
          echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV
          echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV
          echo "PATH=$PATH:$LLVM_PATH/bin" >> $GITHUB_ENV

      # "$HOME/cifuzz/bin" can be removed as soon as new install path is released
      - name: Update Path - MacOS/Linux
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
        run: |
          echo "$HOME/cifuzz/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash

      # "$HOME/cifuzz/bin" can be removed as soon as new install path is released
      - name: Update Path - Windows
        if: contains(matrix.os, 'windows')
        run: |
          echo "$HOME/cifuzz/bin" >> $GITHUB_PATH
          echo "$HOME/AppData/Roaming/cifuzz/bin" >> $GITHUB_PATH
        shell: bash

      - name: Download & execute latest installer
        run: sh -c "$(curl -fsSL https://raw.githubusercontent.com/CodeIntelligenceTesting/cifuzz/main/install.sh)"
        # to make sure our install script is compatible to all the shells 
        shell: sh 

      - name: Test cifuzz 
        run: cifuzz --version | grep -E "^cifuzz version [0-9]+.[0-9]+.[0-9]+$"
        shell: bash

      - name: Download Example Projects
        # workaround to just download a single directory from github
        run: svn export https://github.com/CodeIntelligenceTesting/cifuzz.git/trunk/examples
        shell: bash

      - name: Run CMake Example
        run: |
          cd examples/cmake
          cifuzz run my_fuzz_test 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "heap buffer overflow"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash

      - name: Run Other Build System Example
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
        run: |
          cd examples/other
          cifuzz run my_fuzz_test 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "heap buffer overflow"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash

      - name: Run Maven Example
        run: |
          cd examples/maven
          cifuzz run com.example.FuzzTestCase 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "Remote Code Execution"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash

      - name: Run Gradle Example
        run: |
          cd examples/gradle
          cifuzz run com.example.FuzzTestCase 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "Remote Code Execution"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash

