# This Pipeline tests the minimum requirements by setting up a container with the
# required versions. As it uses the installer created by the release pipeline it
# only runs after a release is published.
name: E2E min requirements

on:
  workflow_run:
    workflows: ["Release Pipeline"]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  min_requirements_linux:
    name: Check minimum requirements on Ubuntu-20.04
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:20.04"
      options: --privileged
    steps:
      - name: Install dependencies
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y cmake=3.16.3-1ubuntu1.20.04.1 llvm-11 clang-11 lcov openjdk-8-jdk maven subversion curl unzip git
          # make sure using java 1.8/8
          update-java-alternatives --set java-1.8.0-openjdk-amd64
          ln -s /usr/bin/clang-11 /usr/bin/clang
          ln -s /usr/bin/clang++-11 /usr/bin/clang++
          ln -s /usr/bin/llvm-symbolizer-11 /usr/bin/llvm-symbolizer
          curl --fail --location https://services.gradle.org/distributions/gradle-7.5.1-bin.zip --output /tmp/gradle-7.5.1-bin.zip
          unzip -d /opt/gradle /tmp/gradle-7.5.1-bin.zip
          echo "/opt/gradle/gradle-7.5.1/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Bazel
        run: |
          DEBIAN_FRONTEND=noninteractive apt install -y python3-distutils
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.15.0/bazelisk-linux-amd64 -o /usr/bin/bazel
          chmod +x /usr/bin/bazel

      - name: Download & execute latest installer
        run: |
          sh -c "$(curl -fsSL https://downloads.code-intelligence.com/assets/install.sh)" ${{ secrets.DOWNLOAD_TOKEN }} latest

      - uses: actions/checkout@v3

      # write settings to project specific file(s) because global configuration is not working
      - name: Write Gradle settings
        run: |
          echo -e "CodeIntelligenceRepositoryUsername=${{ secrets.REPOSITORY_USER }}\nCodeIntelligenceRepositoryPassword=${{ secrets.REPOSITORY_TOKEN }}" > examples/gradle/gradle.properties
        shell: bash

      # write settings to global file because the container is running as root
      - name: Write Maven settings
        run: |
          echo "<settings><servers><server><id>code-intelligence</id><username>${{ secrets.REPOSITORY_USER }}</username><password>${{ secrets.REPOSITORY_TOKEN }}</password></server></servers></settings>" > /usr/share/maven/conf/settings.xml
        shell: bash

      - name: Run cifuzz examples
        uses: ./.github/actions/run_cifuzz
        with:
          os: ubuntu

  notification:
    name: send message to slack notification
    needs: [min_requirements_linux]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-22.04
    steps:
      - name: Send notification to cifuzz dev channel
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: "C064T9ND6AX" # ci-fuzz-devs channel
          slack-message: "Post release pipeline failed (E2E Min. Requirements): ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
