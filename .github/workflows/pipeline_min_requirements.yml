# This Pipeline tests the minimum requirements by setting up a container with the
# required versions. As it uses the installer created by the release pipeline it
# only runs after a release is published.
name: E2E min requirements

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  min_requirements_linux:
    name: Check minimum requirements on Ubuntu-20.04
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:20.04"
      options: --privileged
    steps:
      - name: Install dependencies
        run: |
          apt update
          DEBIAN_FRONTEND=noninteractive apt install -y cmake llvm-11 clang-11 openjdk-8-jdk maven subversion curl unzip git
          ln -s /usr/bin/clang-11 /usr/bin/clang
          ln -s /usr/bin/clang++-11 /usr/bin/clang++
          ln -s /usr/bin/llvm-symbolizer-11 /usr/bin/llvm-symbolizer
          curl --fail --location https://services.gradle.org/distributions/gradle-7.5.1-bin.zip --output /tmp/gradle-7.5.1-bin.zip
          unzip -d /opt/gradle /tmp/gradle-7.5.1-bin.zip
          echo "/opt/gradle/gradle-7.5.1/bin" >> $GITHUB_PATH
          # to make sure the version from the apt repository is as expected
          cmake --version | grep 3.16
          java --version | grep 8
        shell: bash

      - name: Install Bazel
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.15.0/bazelisk-linux-amd64 -o /usr/bin/bazel
          chmod +x /usr/bin/bazel

      # "$HOME/cifuzz/bin" can be removed as soon as new install path is released
      - name: Download & execute latest installer
        run: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/CodeIntelligenceTesting/cifuzz/main/install.sh)"
          echo "$HOME/cifuzz/bin" >> $GITHUB_PATH
        # to make sure our install script is compatible to all the shells
        shell: sh

      - name: Download Example Projects
        # workaround to just download a single directory from github
        run: svn export https://github.com/CodeIntelligenceTesting/cifuzz.git/trunk/examples
        shell: bash

      - name: Run CMake Example
        run: |
          cd examples/cmake
          cifuzz run --use-sandbox=false my_fuzz_test 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "heap buffer overflow"
          cat fuzzing.log | grep "undefined behaviour"
          cat fuzzing.log | grep -E "Findings:\s+2"
        shell: bash

      - name: Run Maven Example
        run: |
          cd examples/maven
          cifuzz run com.example.FuzzTestCase -v 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "Remote Code Execution"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash

      - name: Run Gradle Example
        run: |
          cd examples/gradle
          cifuzz run com.example.FuzzTestCase 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "Remote Code Execution"
          cat fuzzing.log | grep -E "Findings:\s+1"
        shell: bash

      - name: Run Other Build System Example
        run: |
          cd examples/other
          cifuzz run --use-sandbox=false my_fuzz_test 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "heap buffer overflow"
          cat fuzzing.log | grep "undefined behaviour"
          cat fuzzing.log | grep -E "Findings:\s+2"
        shell: bash

      - name: Run Bazel Example
        run: |
          cd examples/bazel
          cifuzz run --use-sandbox=false src:explore_me_fuzz_test 2>&1 | tee fuzzing.log
          cat fuzzing.log | grep "heap buffer overflow"
          cat fuzzing.log | grep -E "Findings:\s+1"  
